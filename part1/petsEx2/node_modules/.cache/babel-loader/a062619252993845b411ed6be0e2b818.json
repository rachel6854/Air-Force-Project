{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Owner\\\\Desktop\\\\air-force-project\\\\part1\\\\petsEx2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Owner\\\\Desktop\\\\air-force-project\\\\part1\\\\petsEx2\\\\src\\\\components\\\\PetsLayer\\\\PetsLayer.tsx\";\nimport React, { useState, Fragment } from 'react';\nimport { MdLocationSearching } from 'react-icons/md';\nimport DrawerContentLayout from '../DrawerContent/DrawerContentLayout';\nimport { useCloseEvent } from '../../graphql/mutations/close-event';\nimport { useEventsQuery } from '../../graphql/queries/events';\nimport { useMapDataLazyQuery } from '../../graphql/queries/map-data';\nimport EventItem from '../EventItem/EventItem';\nimport PositionData from '../PositionData/PositionData';\nimport AppLayout from '../AppLayout/AppLayout';\nimport SelectForm from '../select-form/select-form';\nimport { useQuadcopterQuery } from '../../graphql/queries/quadcopters';\nimport { usePetTypesQuery } from '../../graphql/queries/pet-types';\nimport DroneIcon from \"../DroneIcon/DroneIcon\";\nimport Footer from \"../footer/footer\";\nimport MapGrid from '../Map/MapGrid';\nconst BACKGROUND_IMAGE = 'https://previews.123rf.com/images/pbardocz/pbardocz1905/pbardocz190500880/122638204-black-and-white-vector-city-map-of-berlin-with-well-organized-separated-layers-.jpg';\n\nconst PetsLayer = () => {\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        selectedEvent = _useState2[0],\n        setSelectedEvent = _useState2[1];\n\n  const _useCloseEvent = useCloseEvent(),\n        _useCloseEvent2 = _slicedToArray(_useCloseEvent, 1),\n        closeEvent = _useCloseEvent2[0];\n\n  const _usePetTypesQuery = usePetTypesQuery(),\n        petTypesData = _usePetTypesQuery.data;\n\n  const petTypes = petTypesData ? petTypesData.allPetTypes.map(({\n    id,\n    description: text\n  }) => ({\n    id,\n    text\n  })) : [];\n\n  const _useEventsQuery = useEventsQuery(),\n        eventsData = _useEventsQuery.data;\n\n  const events = eventsData ? eventsData.openEvents : [];\n\n  const _useMapDataLazyQuery = useMapDataLazyQuery(),\n        _useMapDataLazyQuery2 = _slicedToArray(_useMapDataLazyQuery, 2),\n        getMapData = _useMapDataLazyQuery2[0],\n        _useMapDataLazyQuery3 = _useMapDataLazyQuery2[1],\n        mapDataResult = _useMapDataLazyQuery3.data,\n        mapDataLoading = _useMapDataLazyQuery3.loading;\n\n  const _useQuadcopterQuery = useQuadcopterQuery(),\n        quadcopterData = _useQuadcopterQuery.data;\n\n  const mapItems = quadcopterData ? quadcopterData.allQuadcopters.map(({\n    id,\n    x,\n    y\n  }) => ({\n    id,\n    position: {\n      x,\n      y\n    },\n    icon: DroneIcon\n  })) : [];\n\n  if (selectedEvent) {\n    mapItems.push({\n      id: -1,\n      position: selectedEvent.gridCell,\n      icon: MdLocationSearching,\n      size: 'small',\n      color: 'red',\n      offsetElement: React.createElement(SelectForm, {\n        header: \"\\u05E1\\u05D9\\u05D5\\u05D5\\u05D2 \\u05D7\\u05D9\\u05D4\",\n        selectText: \"\\u05E1\\u05D5\\u05D2 \\u05D4\\u05D7\\u05D9\\u05D4\",\n        submitText: \"\\u05D1\\u05E6\\u05E2\",\n        options: petTypes,\n        onSubmit: selectedOption => {\n          if (selectedOption) {\n            closeEvent({\n              variables: {\n                id: selectedEvent.id,\n                petId: selectedOption.id\n              }\n            });\n            setSelectedEvent(undefined);\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      })\n    });\n  }\n\n  const onClassifyClick = id => {\n    const clickedEvent = events.find(({\n      id: eventId\n    }) => id === eventId);\n\n    if (clickedEvent) {\n      getMapData({\n        variables: clickedEvent.gridCell\n      });\n      setSelectedEvent(clickedEvent);\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), React.createElement(AppLayout, {\n    map: React.createElement(React.Fragment, null, React.createElement(MapGrid, {\n      mapSrc: BACKGROUND_IMAGE,\n      dimX: 100,\n      dimY: 100,\n      mapItems: mapItems,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })),\n    drawer: React.createElement(DrawerContentLayout, {\n      listHeader: \"\\u05D0\\u05D9\\u05E8\\u05D5\\u05E2\\u05D9\\u05DD \\u05E4\\u05EA\\u05D5\\u05D7\\u05D9\\u05DD\",\n      listElements: React.createElement(React.Fragment, null, events.map((event, index) => React.createElement(Fragment, {\n        key: event.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(EventItem, {\n        event: event,\n        onTrashClick: id => {\n          closeEvent({\n            variables: {\n              id\n            }\n          });\n          setSelectedEvent(undefined);\n        },\n        onClassifyClick: onClassifyClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }), index + 1 !== events.length && React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      })))),\n      positionData: React.createElement(PositionData, {\n        loading: mapDataLoading,\n        mapData: selectedEvent && mapDataResult && mapDataResult.mapData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }));\n};\n\nexport default PetsLayer;","map":{"version":3,"sources":["C:/Users/Owner/Desktop/air-force-project/part1/petsEx2/src/components/PetsLayer/PetsLayer.tsx"],"names":["React","useState","Fragment","MdLocationSearching","DrawerContentLayout","useCloseEvent","useEventsQuery","useMapDataLazyQuery","EventItem","PositionData","AppLayout","SelectForm","useQuadcopterQuery","usePetTypesQuery","DroneIcon","Footer","MapGrid","BACKGROUND_IMAGE","PetsLayer","selectedEvent","setSelectedEvent","closeEvent","petTypesData","data","petTypes","allPetTypes","map","id","description","text","eventsData","events","openEvents","getMapData","mapDataResult","mapDataLoading","loading","quadcopterData","mapItems","allQuadcopters","x","y","position","icon","push","gridCell","size","color","offsetElement","selectedOption","variables","petId","undefined","onClassifyClick","clickedEvent","find","eventId","event","index","length","mapData"],"mappings":"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","sourcesContent":["import React, { FC, useState, Fragment } from 'react';\r\nimport { MdLocationSearching } from 'react-icons/md';\r\nimport DrawerContentLayout from '../DrawerContent/DrawerContentLayout';\r\nimport { useCloseEvent } from '../../graphql/mutations/close-event';\r\nimport { useEventsQuery, Event } from '../../graphql/queries/events';\r\nimport { useMapDataLazyQuery } from '../../graphql/queries/map-data';\r\nimport EventItem from '../EventItem/EventItem';\r\nimport PositionData from '../PositionData/PositionData';\r\nimport AppLayout from '../AppLayout/AppLayout';\r\nimport SelectForm, { SelectOption } from '../select-form/select-form';\r\nimport {\r\n  useQuadcopterQuery,\r\n  Quadcopter,\r\n} from '../../graphql/queries/quadcopters';\r\nimport { usePetTypesQuery } from '../../graphql/queries/pet-types';\r\nimport DroneIcon from \"../DroneIcon/DroneIcon\";\r\nimport Footer from \"../footer/footer\"\r\nimport AdoptionInfo from '../AdoptionInfo/AdoptionInfo'\r\nimport {MapForPets} from '../MapForPets/MapForPets';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MapGrid, {MapItemDesc} from '../Map/MapGrid';\r\n\r\nconst BACKGROUND_IMAGE =\r\n  'https://previews.123rf.com/images/pbardocz/pbardocz1905/pbardocz190500880/122638204-black-and-white-vector-city-map-of-berlin-with-well-organized-separated-layers-.jpg';\r\n\r\nconst PetsLayer: FC<{}> = () => {\r\n  const [selectedEvent, setSelectedEvent] = useState<Event>();\r\n  const [closeEvent] = useCloseEvent();\r\n\r\n  const {data: petTypesData} = usePetTypesQuery();\r\n  const petTypes: SelectOption[] = petTypesData\r\n    ? petTypesData.allPetTypes.map(({id, description: text}) => ({\r\n        id,\r\n        text,\r\n      }))\r\n    : [];\r\n\r\n  const {data: eventsData} = useEventsQuery();\r\n  const events: Event[] = eventsData ? eventsData.openEvents : [];\r\n\r\n  const [\r\n    getMapData,\r\n    {data: mapDataResult, loading: mapDataLoading},\r\n  ] = useMapDataLazyQuery();\r\n\r\n  const {data: quadcopterData} = useQuadcopterQuery();\r\n  const mapItems: MapItemDesc[] = quadcopterData\r\n    ? quadcopterData.allQuadcopters.map(({id, x, y}: Quadcopter) => ({\r\n        id,\r\n        position: {\r\n          x,\r\n          y,\r\n        },\r\n        icon: DroneIcon,\r\n      }))\r\n    : [];\r\n\r\n  if (selectedEvent) {\r\n    mapItems.push({\r\n      id: -1,\r\n      position: selectedEvent.gridCell,\r\n      icon: MdLocationSearching,\r\n      size: 'small',\r\n      color: 'red',\r\n      offsetElement: (\r\n        <SelectForm\r\n          header=\"סיווג חיה\"\r\n          selectText=\"סוג החיה\"\r\n          submitText=\"בצע\"\r\n          options={petTypes}\r\n          onSubmit={(selectedOption: SelectOption | undefined) => {\r\n            if (selectedOption) {\r\n              closeEvent({\r\n                variables: {id: selectedEvent.id, petId: selectedOption.id},\r\n              });\r\n              setSelectedEvent(undefined);\r\n            }\r\n          }}\r\n        />\r\n      ),\r\n    });\r\n  }\r\n\r\n  const onClassifyClick = (id: number) => {\r\n    const clickedEvent = events.find(({id: eventId}) => id === eventId);\r\n\r\n    if (clickedEvent) {\r\n      getMapData({variables: clickedEvent.gridCell});\r\n      setSelectedEvent(clickedEvent);\r\n    }\r\n  };\r\n\r\n  return ( \r\n    <>\r\n    <Footer/>\r\n    <AppLayout\r\n          map={\r\n            <>\r\n              <MapGrid\r\n                mapSrc={BACKGROUND_IMAGE}\r\n                dimX={100}\r\n                dimY={100}\r\n                mapItems={mapItems}\r\n              />\r\n            </>\r\n          }\r\n          drawer={\r\n            <DrawerContentLayout\r\n              listHeader=\"אירועים פתוחים\"\r\n              listElements={\r\n                <>\r\n                  {events.map((event, index) => (\r\n                    <Fragment key={event.id}>\r\n                      <EventItem\r\n                        event={event}\r\n                        onTrashClick={id => {\r\n                          closeEvent({variables: {id}});\r\n                          setSelectedEvent(undefined);\r\n                        }}\r\n                        onClassifyClick={onClassifyClick}\r\n                      />\r\n                      {index + 1 !== events.length && <hr />}\r\n                    </Fragment>\r\n                  ))}\r\n                </>\r\n              }\r\n              positionData={\r\n                <PositionData\r\n                  loading={mapDataLoading}\r\n                  mapData={selectedEvent && mapDataResult && mapDataResult.mapData}\r\n                />\r\n              }\r\n            />\r\n          }\r\n        />\r\n    </>\r\n\r\n  );\r\n};\r\n\r\nexport default PetsLayer;\r\n"]},"metadata":{},"sourceType":"module"}